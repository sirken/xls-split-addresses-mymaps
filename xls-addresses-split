#!/usr/bin/env python3

import openpyxl
import os
import sys
import math


max_rows_per_file = 2000
xls_req_headers = [["Street",False,-1],["City",False,-1],["State",False,-1]]


# Leading zeroes for num_files_split visual, for filesystem sorting
def add_leading_zeroes(num, num_files_split):
    # If we're only outputting one file, append numbers
    if num_files_split > 1:
        # Get length of string for total number of files
        num_files_str_len = len(str(num_files_split))
        # Add leading zeroes
        num_files_split_visual = str(num).zfill(num_files_str_len)
        return num_files_split_visual
    else:
        return ""

# CLI arguments (first arguemnt is the filename, second filename)
input_file = ""

if len(sys.argv) < 2:
    fname = sys.argv[0].split('/')
    fname = fname[-1]
    print(f'\r\nSplit xls into multiple files (default {max_rows_per_file} rows each). Usage: ')
    print(f'    ./{fname} "/path/to/file.xls"')
    print('')
    print('Specifiy number of rows per file (optional):')
    print(f'    ./{fname} "/path/to/file.xls" [rows]')
    print('')
    quit()
else:
    input_file = sys.argv[1]
    try:
        max_rows_per_file = int(sys.argv[2])
    except:
        pass

# Set actual number of records per file (not including header)
max_records_per_file = max_rows_per_file - 1
# Set output file base name
output_file = input_file + "-output" # Start of output file names



print("Loading xlsx file...")

# Open the workbook
wb = openpyxl.load_workbook(input_file)
# Active sheet
ws = wb.active



print("Checking headers...")

# Find matching headers in xlsx file
for row_cells in ws.iter_rows(min_row=1, max_row=1):
    for pos, cell in enumerate(row_cells):
        for item in xls_req_headers:
            if cell.value.lower() == item[0].lower():
                item[1] = True
                item[2] = pos

header_check = True
# Verify headers exist
for item in xls_req_headers:
    if item[1] == False:
        header_check = False
        print(f"Missing header: {item[0]}")

if header_check == False:
    raise SystemExit()



print(f"Target file size: {max_rows_per_file} rows")
print(f"Gathering data...")

# List for storing header values
xls_headers = []

# Loop through first row, save header values
for row_cells in ws.iter_rows(min_row=1, max_row=1):
    for cell in row_cells:
        xls_headers.append(cell.value)

# list to store addresses
list_addresses = []

# Loop through address rows and gather data
for row_cells in ws.iter_rows(min_row=2):

    # Save row values to list
    list_row_values = []

    address = row_cells[xls_req_headers[0][2]].value
    city = row_cells[xls_req_headers[1][2]].value
    state = row_cells[xls_req_headers[2][2]].value

    row_is_valid = False
    row_has_pobox = False

    # If address field contains data
    if address is not None:
        # Get rid of periods and spaces to take care of any number of edge cases
        address_check = address.replace('.', '') # Remove periods
        address_check = address_check.replace(' ', '') # Remove spaces
        # Any PO box should now be pobox
        if address_check.lower().startswith('pobox'):
            row_has_pobox = True
            # If city and state exist, set record as valid
            if (city is not None) and (state is not None):
                row_is_valid = True
        # If address is not a PO Box, set as valid
        else:
            if (city is not None) and (state is not None):
                row_is_valid = True
    # If address field is blank, but city and state exist
    elif (city is not None) and (state is not None):
        row_is_valid = True


    # If we have marked this address as valid, then append data
    if row_is_valid == True:

        # Loop through row cells
        for col, cell in enumerate(row_cells):

            # We're at the address cell, append or not?
            if col == xls_req_headers[0][2]:
                # If it's a PO Box, append blank cell
                if row_has_pobox == True:
                    list_row_values.append(None)
                # If it's not a PO Box, just append the data
                else:
                    list_row_values.append(cell.value)

            # If we're not at the address cell, just append the data
            else:
                list_row_values.append(cell.value)

        # Append the entire row data to the addresses list
        list_addresses.append(list_row_values)



# Get list length, how many items total
list_length = len(list_addresses)

print(f"Saving xlsx files... {list_length} total records")

# Which row in the split file are we on
row_count_split_file = 1
# Which split file are we on
file_num = 0
# Name container for split files
file_split_name = ""
# Initialize output workbook
wb_output = openpyxl.Workbook()

# Function to start a new xlsx file
def start_new_split_xls():
    global xls_headers, file_num, file_split_name, row_count_split_file, wb_output
    # Reset temporary split file count
    row_count_split_file = 1
    # Increment the file number
    file_num += 1
    file_split_name = output_file + "-" + add_leading_zeroes(file_num, math.ceil((list_length / max_records_per_file))) + ".xlsx"

    # Show how many rows per file
    rows_visual = 0
    # If current file number * max_records_per_file exceeds total_records, then we're on the last file. Show remainder
    # Add 1 to include header
    if file_num * max_records_per_file > list_length:
        rows_visual = (list_length % max_records_per_file) + 1
    # Otherwise, we are not at the last file, so this one will reach max_rows_per_file
    else:
        rows_visual = max_rows_per_file

    print(f"Saving file {add_leading_zeroes(file_num, math.ceil((list_length / max_records_per_file)))}... ({rows_visual} rows) - '{file_split_name}'")

    # Re-initialize workbook to clear out data from previous file
    wb_output = openpyxl.Workbook()
    # Append header values to first row in workbook
    wb_output['Sheet'].append(xls_headers)



# Start first file
start_new_split_xls()

# Split list, start counting at 1 so we can easily compare our place in the list
for count, item in enumerate(list_addresses, start=1):

    # While we are working with this split file, append rows
    if row_count_split_file <= max_rows_per_file:
        wb_output['Sheet'].append(item)
        row_count_split_file += 1

    # We've reached the last row for this file, or the end of the whole list
    if (row_count_split_file == max_rows_per_file) or (count == list_length):
        # Save the file
        wb_output.save(file_split_name)

        # If our counter is less than the total list length, we have more records to go, create new file
        if count < list_length:
            start_new_split_xls()
